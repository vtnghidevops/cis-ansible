#!/bin/bash

# CIS Compliance & Penetration Testing Check Script

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_header() {
    echo -e "\n${BLUE}===== [CHECK] $1 =====${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${CYAN}ℹ️  $1${NC}"
}

print_section() {
    echo -e "\n${PURPLE}🔍 $1${NC}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check mount points
check_mount_points() {
    print_header "Mount Points"
    
    echo "Current mount points:"
    mount | grep -E ' /var | /var/log | /tmp | /home ' | while read -r line; do
        echo "  $line"
    done
    
    echo -e "\nFSTAB entries:"
    if [ -f /etc/fstab ]; then
        grep -E ' /var | /var/log | /tmp | /home ' /etc/fstab | while read -r line; do
            echo "  $line"
        done
    else
        print_error "FSTAB file not found"
    fi
}

# Function to check mount options
check_mount_options() {
    print_header "Mount Options"
    
    # Check /tmp mount options
    print_section "Checking /tmp mount options"
    tmp_mount=$(findmnt -n /tmp 2>/dev/null)
    if [ -n "$tmp_mount" ]; then
        echo "$tmp_mount" | grep -q "nodev" && print_success "/tmp has nodev option" || print_warning "/tmp missing nodev option"
        echo "$tmp_mount" | grep -q "noexec" && print_success "/tmp has noexec option" || print_warning "/tmp missing noexec option"
        echo "$tmp_mount" | grep -q "nosuid" && print_success "/tmp has nosuid option" || print_warning "/tmp missing nosuid option"
    else
        print_warning "/tmp not mounted or not found"
    fi
    
    # Check /home mount options
    print_section "Checking /home mount options"
    home_mount=$(findmnt -n /home 2>/dev/null)
    if [ -n "$home_mount" ]; then
        echo "$home_mount" | grep -q "nodev" && print_success "/home has nodev option" || print_warning "/home missing nodev option"
        echo "$home_mount" | grep -q "nosuid" && print_success "/home has nosuid option" || print_warning "/home missing nosuid option"
    else
        print_warning "/home not mounted or not found"
    fi
    
    # Check /var mount options
    print_section "Checking /var mount options"
    var_mount=$(findmnt -n /var 2>/dev/null)
    if [ -n "$var_mount" ]; then
        echo "$var_mount" | grep -q "nodev" && print_success "/var has nodev option" || print_warning "/var missing nodev option"
    else
        print_warning "/var not mounted or not found"
    fi
}

# Function to check SSH configuration
check_ssh_config() {
    print_header "SSH Configuration"
    
    sshd_config="/etc/ssh/sshd_config"
    if [ -f "$sshd_config" ]; then
        print_section "SSH Config File Settings"
        
        # Check ClientAliveInterval
        client_alive_interval=$(grep "^ClientAliveInterval" "$sshd_config" | awk '{print $2}')
        if [ -n "$client_alive_interval" ] && [ "$client_alive_interval" -le 300 ]; then
            print_success "ClientAliveInterval: $client_alive_interval (<= 300)"
        else
            print_warning "ClientAliveInterval: $client_alive_interval (should be <= 300)"
        fi
        
        # Check ClientAliveCountMax
        client_alive_count=$(grep "^ClientAliveCountMax" "$sshd_config" | awk '{print $2}')
        if [ -n "$client_alive_count" ] && [ "$client_alive_count" -le 3 ]; then
            print_success "ClientAliveCountMax: $client_alive_count (<= 3)"
        else
            print_warning "ClientAliveCountMax: $client_alive_count (should be <= 3)"
        fi
        
        # Check AllowAgentForwarding
        allow_agent=$(grep "^AllowAgentForwarding" "$sshd_config" | awk '{print $2}')
        if [ "$allow_agent" = "no" ]; then
            print_success "AllowAgentForwarding: no"
        else
            print_warning "AllowAgentForwarding: $allow_agent (should be no)"
        fi
        
        # Check DisableForwarding
        disable_forward=$(grep "^DisableForwarding" "$sshd_config" | awk '{print $2}')
        if [ "$disable_forward" = "yes" ]; then
            print_success "DisableForwarding: yes"
        else
            print_warning "DisableForwarding: $disable_forward (should be yes)"
        fi
        
        print_section "SSH Runtime Settings"
        sshd -T 2>/dev/null | grep -E "clientaliveinterval|clientalivecountmax|allowagentforwarding" | while read -r line; do
            echo "  $line"
        done
    else
        print_error "SSH config file not found: $sshd_config"
    fi
}

# Function to check password policy
check_password_policy() {
    print_header "Password Policy"
    
    pwquality_conf="/etc/security/pwquality.conf"
    if [ -f "$pwquality_conf" ]; then
        print_section "Password Quality Settings"
        
        # Check minimum length - Updated to >= 14
        minlen=$(grep "minlen" "$pwquality_conf" | grep -v '^#' | awk '{print $3}')
        if [ -n "$minlen" ] && [ "$minlen" -ge 14 ]; then
            print_success "minlen: $minlen (>= 14)"
        else
            print_warning "minlen: $minlen (should be >= 14)"
        fi
        
        # Check minimum character classes - Updated to >= 4
        minclass=$(grep "minclass" "$pwquality_conf" | grep -v '^#' | awk '{print $3}')
        if [ -n "$minclass" ] && [ "$minclass" -ge 4 ]; then
            print_success "minclass: $minclass (>= 4)"
        else
            print_warning "minclass: $minclass (should be >= 4)"
        fi
        
        # Check other password requirements
        for setting in "ucredit" "lcredit" "dcredit" "ocredit"; do
            value=$(grep "$setting" "$pwquality_conf" | grep -v '^#' | awk '{print $3}')
            if [ -n "$value" ]; then
                echo "  $setting: $value"
            fi
        done
    else
        print_error "Password quality config not found: $pwquality_conf"
    fi
}

# Function to check password history
check_password_history() {
    print_header "Password History"
    
    pwhistory_conf="/etc/security/pwhistory.conf"
    if [ -f "$pwhistory_conf" ]; then
        remember=$(grep "remember" "$pwhistory_conf" | grep -v '^#' | awk '{print $3}')
        if [ -n "$remember" ] && [ "$remember" -ge 24 ]; then
            print_success "Password history: $remember (>= 24)"
        else
            print_warning "Password history: $remember (should be >= 24)"
        fi
    else
        print_error "Password history config not found: $pwhistory_conf"
    fi
}

# Function to check password expiration
check_password_expiration() {
    print_header "Password Expiration"
    
    print_section "Users with password max days > 365 or < 1"
    users_with_invalid_expiry=$(awk -F: '($2 ~ /^\$.+\$/) && ($5 > 365 || $5 < 1) { print "User:", $1, "PASS_MAX_DAYS:", $5 }' /etc/shadow 2>/dev/null)
    
    if [ -n "$users_with_invalid_expiry" ]; then
        echo "$users_with_invalid_expiry" | while read -r line; do
            print_warning "$line"
        done
    else
        print_success "All users have appropriate password expiration (1-365 days)"
    fi
}

# Function to check log retention
check_log_retention() {
    print_header "Log Retention"
    
    print_section "Logrotate retention settings (should be >= 90 days)"
    if [ -d /etc/logrotate.d ]; then
        logrotate_files=$(find /etc/logrotate.d/ -type f 2>/dev/null)
        if [ -n "$logrotate_files" ]; then
            for file in $logrotate_files; do
                rotate_value=$(grep "rotate" "$file" | grep -v '^#' | awk '{print $2}' | head -1)
                if [ -n "$rotate_value" ] && [ "$rotate_value" -ge 13 ]; then
                    print_success "$(basename "$file"): rotate $rotate_value (>= 13 weeks for 90+ days)"
                elif [ -n "$rotate_value" ]; then
                    print_warning "$(basename "$file"): rotate $rotate_value (should be >= 13 weeks for 90+ days)"
                fi
            done
        else
            print_warning "No logrotate configuration files found"
        fi
    else
        print_warning "Logrotate directory not found"
    fi
}

# Function to check antivirus/EDR
check_antivirus() {
    print_header "Antivirus/EDR Software"
    
    print_section "Checking for AV/EDR software"
    
    # Check for ClamAV
    if command_exists clamscan; then
        print_success "ClamAV is installed"
    else
        print_warning "ClamAV not found"
    fi
    
    # Check for other AV/EDR software
    av_software=$(rpm -qa 2>/dev/null | grep -Ei 'clamav|sophos|crowdstrike|falcon|mcafee|trend|kaspersky|symantec|norton' || echo "none")
    if [ "$av_software" != "none" ]; then
        print_success "Found AV/EDR software:"
        echo "$av_software" | while read -r software; do
            echo "  $software"
        done
    else
        print_warning "No known AV/EDR software found"
    fi
}

# Function to check internet connectivity
check_internet_connectivity() {
    print_header "Internet Connectivity"
    
    print_section "Testing internet connectivity"
    
    # Test DNS resolution
    if nslookup google.com >/dev/null 2>&1; then
        print_warning "DNS resolution working - internet access possible"
    else
        print_success "DNS resolution failed - internet access may be restricted"
    fi
    
    # Test ping to Google DNS
    if ping -c 1 -W 3 8.8.8.8 >/dev/null 2>&1; then
        print_warning "Ping to 8.8.8.8 successful - internet access enabled!"
    else
        print_success "Ping to 8.8.8.8 failed - internet access seems blocked"
    fi
    
    # Test HTTPS connectivity
    if curl -s --connect-timeout 5 https://www.google.com >/dev/null 2>&1; then
        print_warning "HTTPS connectivity working - internet access confirmed"
    else
        print_success "HTTPS connectivity failed - internet access restricted"
    fi
}

# Function to check system information
check_system_info() {
    print_header "System Information"
    
    print_section "Operating System"
    if [ -f /etc/os-release ]; then
        echo "OS Details:"
        grep -E "^(NAME|VERSION|ID)" /etc/os-release | while read -r line; do
            echo "  $line"
        done
    fi
    
    print_section "Kernel Version"
    echo "Kernel: $(uname -r)"
    
    print_section "System Architecture"
    echo "Architecture: $(uname -m)"
    
    print_section "Hostname"
    echo "Hostname: $(hostname)"
}

# Function to check additional security settings
check_additional_security() {
    print_header "Additional Security Checks"
    
    print_section "SELinux Status"
    if command_exists sestatus; then
        sestatus | head -1
    else
        print_warning "SELinux not available"
    fi
    
    print_section "Firewall Status"
    if command_exists firewall-cmd; then
        firewall-cmd --state 2>/dev/null && print_success "Firewalld is running" || print_warning "Firewalld is not running"
    elif command_exists iptables; then
        iptables -L | grep -q "Chain" && print_success "iptables rules found" || print_warning "No iptables rules found"
    else
        print_warning "No firewall detected"
    fi
    
    print_section "Running Services"
    echo "Critical services status:"
    for service in sshd crond rsyslog; do
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            print_success "$service: running"
        else
            print_warning "$service: not running"
        fi
    done
}

# Function to generate compliance summary
generate_compliance_summary() {
    print_header "FINAL COMPLIANCE SUMMARY"
    
    # Initialize counters
    total_checks=0
    passed_checks=0
    failed_checks=0
    warning_checks=0
    
    echo -e "\n${PURPLE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                    CIS COMPLIANCE SUMMARY                      ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════╝${NC}"
    
    echo -e "\n${CYAN}┌─────────────────────────────────────────────────────────────────┐${NC}"
    echo -e "${CYAN}│                     SECURITY CHECKLIST                           │${NC}"
    echo -e "${CYAN}└─────────────────────────────────────────────────────────────────┘${NC}"
    
    # 1. Mount Points Separation
    echo -e "\n${BLUE}1️⃣  MOUNT POINTS SEPARATION${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    
    var_mounted=0
    tmp_mounted=0
    varlog_mounted=0
    
    findmnt -n /var >/dev/null 2>&1 && var_mounted=1
    findmnt -n /tmp >/dev/null 2>&1 && tmp_mounted=1
    findmnt -n /var/log >/dev/null 2>&1 && varlog_mounted=1
    
    total_checks=$((total_checks + 3))
    [ "$var_mounted" -eq 1 ] && { print_success "   ✅ /var has separate partition"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  /var needs separate partition"; warning_checks=$((warning_checks + 1)); }
    [ "$tmp_mounted" -eq 1 ] && { print_success "   ✅ /tmp has separate partition"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  /tmp needs separate partition"; warning_checks=$((warning_checks + 1)); }
    [ "$varlog_mounted" -eq 1 ] && { print_success "   ✅ /var/log has separate partition"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  /var/log needs separate partition"; warning_checks=$((warning_checks + 1)); }
    
    # 2. Mount Options
    echo -e "\n${BLUE}2️⃣  MOUNT OPTIONS${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    
    home_mount=$(findmnt -n /home 2>/dev/null)
    home_nodev=0
    home_nosuid=0
    
    if [ -n "$home_mount" ]; then
        echo "$home_mount" | grep -q "nodev" && home_nodev=1
        echo "$home_mount" | grep -q "nosuid" && home_nosuid=1
    fi
    
    total_checks=$((total_checks + 2))
    [ "$home_nodev" -eq 1 ] && { print_success "   ✅ /home has nodev option"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  /home missing nodev option"; warning_checks=$((warning_checks + 1)); }
    [ "$home_nosuid" -eq 1 ] && { print_success "   ✅ /home has nosuid option"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  /home missing nosuid option"; warning_checks=$((warning_checks + 1)); }
    
    # 3. Internet Access Control
    echo -e "\n${BLUE}3️⃣  INTERNET ACCESS CONTROL${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    
    total_checks=$((total_checks + 1))
    if ! ping -c 1 -W 3 8.8.8.8 >/dev/null 2>&1; then
        print_success "   ✅ Internet access is properly restricted"
        passed_checks=$((passed_checks + 1))
    else
        print_warning "   ⚠️  Internet access is enabled - security risk!"
        warning_checks=$((warning_checks + 1))
    fi
    
    # 4. Antivirus/EDR Software
    echo -e "\n${BLUE}4️⃣  ANTIVIRUS/EDR SOFTWARE${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    
    total_checks=$((total_checks + 1))
    if command_exists clamscan || rpm -qa 2>/dev/null | grep -qi 'clamav\|sophos\|crowdstrike\|falcon\|mcafee\|trend\|kaspersky\|symantec\|norton'; then
        print_success "   ✅ AV/EDR software detected"
        passed_checks=$((passed_checks + 1))
    else
        print_warning "   ⚠️  No AV/EDR software found"
        warning_checks=$((warning_checks + 1))
    fi
    
    # 5. Password Policy
    echo -e "\n${BLUE}5️⃣  PASSWORD POLICY${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    
    pwquality_conf="/etc/security/pwquality.conf"
    if [ -f "$pwquality_conf" ]; then
        minlen=$(grep "minlen" "$pwquality_conf" | grep -v '^#' | awk '{print $3}')
        minclass=$(grep "minclass" "$pwquality_conf" | grep -v '^#' | awk '{print $3}')
        
        total_checks=$((total_checks + 2))
        [ -n "$minlen" ] && [ "$minlen" -ge 14 ] && { print_success "   ✅ Password length >= 14"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  Password length should be >= 14"; warning_checks=$((warning_checks + 1)); }
        [ -n "$minclass" ] && [ "$minclass" -ge 4 ] && { print_success "   ✅ Password complexity >= 4 classes"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  Password complexity should be >= 4 classes"; warning_checks=$((warning_checks + 1)); }
    else
        total_checks=$((total_checks + 2))
        print_error "   ❌ Password quality config not found"
        failed_checks=$((failed_checks + 2))
    fi
    
    # 6. Password History
    echo -e "\n${BLUE}6️⃣  PASSWORD HISTORY${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    
    pwhistory_conf="/etc/security/pwhistory.conf"
    total_checks=$((total_checks + 1))
    if [ -f "$pwhistory_conf" ]; then
        remember=$(grep "remember" "$pwhistory_conf" | grep -v '^#' | awk '{print $3}')
        [ -n "$remember" ] && [ "$remember" -ge 24 ] && { print_success "   ✅ Password history >= 24"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  Password history should be >= 24"; warning_checks=$((warning_checks + 1)); }
    else
        print_error "   ❌ Password history config not found"
        failed_checks=$((failed_checks + 1))
    fi
    
    # 7. SSH Security
    echo -e "\n${BLUE}7️⃣  SSH SECURITY${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    
    sshd_config="/etc/ssh/sshd_config"
    total_checks=$((total_checks + 1))
    if [ -f "$sshd_config" ]; then
        disable_forward=$(grep "^DisableForwarding" "$sshd_config" | awk '{print $2}')
        [ "$disable_forward" = "yes" ] && { print_success "   ✅ SSH DisableForwarding enabled"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  SSH DisableForwarding should be enabled"; warning_checks=$((warning_checks + 1)); }
    else
        print_error "   ❌ SSH config not found"
        failed_checks=$((failed_checks + 1))
    fi
    
    # 8. Log Retention
    echo -e "\n${BLUE}8️⃣  LOG RETENTION${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    
    logrotate_ok=0
    if [ -d /etc/logrotate.d ]; then
        for file in /etc/logrotate.d/*; do
            if [ -f "$file" ]; then
                rotate_value=$(grep "rotate" "$file" | grep -v '^#' | awk '{print $2}' | head -1)
                if [ -n "$rotate_value" ] && [ "$rotate_value" -ge 13 ]; then
                    logrotate_ok=1
                    break
                fi
            fi
        done
    fi
    
    total_checks=$((total_checks + 1))
    [ "$logrotate_ok" -eq 1 ] && { print_success "   ✅ Log retention >= 90 days configured"; passed_checks=$((passed_checks + 1)); } || { print_warning "   ⚠️  Log retention should be >= 90 days"; warning_checks=$((warning_checks + 1)); }
    
    # Final Summary
    echo -e "\n${PURPLE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                      FINAL SUMMARY                             ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════╝${NC}"
    
    echo -e "\n${CYAN}📊 COMPLIANCE STATISTICS:${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    echo -e "   ${GREEN}✅ PASSED:  $passed_checks${NC}"
    echo -e "   ${YELLOW}⚠️  WARNINGS: $warning_checks${NC}"
    echo -e "   ${RED}❌ FAILED:  $failed_checks${NC}"
    echo -e "   ${BLUE}📋 TOTAL:   $total_checks${NC}"
    
    # Calculate compliance percentage
    if [ $total_checks -gt 0 ]; then
        compliance_percent=$((passed_checks * 100 / total_checks))
        echo -e "\n${CYAN}📈 COMPLIANCE RATE:${NC}"
        echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
        
        if [ $compliance_percent -ge 90 ]; then
            echo -e "   ${GREEN}🎉 EXCELLENT: $compliance_percent% Compliant${NC}"
        elif [ $compliance_percent -ge 75 ]; then
            echo -e "   ${GREEN}👍 GOOD: $compliance_percent% Compliant${NC}"
        elif [ $compliance_percent -ge 50 ]; then
            echo -e "   ${YELLOW}⚠️  FAIR: $compliance_percent% Compliant${NC}"
        else
            echo -e "   ${RED}🚨 POOR: $compliance_percent% Compliant${NC}"
        fi
    fi
    
    echo -e "\n${CYAN}📝 RECOMMENDATIONS:${NC}"
    echo -e "${CYAN}   ──────────────────────────────────────────────────────────────${NC}"
    if [ $warning_checks -gt 0 ] || [ $failed_checks -gt 0 ]; then
        echo -e "   ${YELLOW}• Review and fix the warnings/failures above${NC}"
        echo -e "   ${YELLOW}• Focus on critical security settings first${NC}"
        echo -e "   ${YELLOW}• Re-run this script after making changes${NC}"
    else
        echo -e "   ${GREEN}• All security checks passed!${NC}"
        echo -e "   ${GREEN}• System is well configured for security${NC}"
    fi
    
    echo -e "\n${PURPLE}══════════════════════════════════════════════════════════════${NC}"
    echo -e "${PURPLE}                    END OF COMPLIANCE REPORT                    ${NC}"
    echo -e "${PURPLE}══════════════════════════════════════════════════════════════${NC}"
}

# Main execution
main() {
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║           CIS Compliance & Penetration Testing Check         ║"
    echo "║                        Version 1.1                           ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}Starting comprehensive security checks...${NC}\n"
    
    # Run all checks
    check_system_info
    check_mount_points
    check_mount_options
    check_ssh_config
    check_password_policy
    check_password_history
    check_password_expiration
    check_log_retention
    check_antivirus
    check_internet_connectivity
    check_additional_security
    
    # Generate compliance summary
    generate_compliance_summary
    
    echo -e "\n${GREEN}══════════════════════════════════════════════════════════════${NC}"
    echo -e "${GREEN}                    Security Check Complete!                    ${NC}"
    echo -e "${GREEN}══════════════════════════════════════════════════════════════${NC}"
    echo -e "\n${YELLOW}Legend:${NC}"
    echo -e "  ${GREEN}✅ Success${NC} - Setting is compliant"
    echo -e "  ${YELLOW}⚠️  Warning${NC} - Setting needs attention"
    echo -e "  ${RED}❌ Error${NC} - Critical issue found"
    echo -e "  ${CYAN}ℹ️  Info${NC} - Informational message"
}

# Check if script is run with root privileges
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}This script should be run as root for complete functionality${NC}"
    echo -e "${YELLOW}Some checks may fail without root privileges${NC}\n"
fi

# Run main function
main "$@" 